
name: 'Build'
env:
  DotNetVersion: "6.0.0"
  NuGetVersion: "5.9.1"
  MonoVersion: "6.12.0"
  Artifacts: ${{ github.workspace }}/artifacts/
  Coverage: ${{ github.workspace }}/coverage/
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
defaults:
  run:
    shell: pwsh
on:
  push:
    branches:
      - Chatyusha-Patch1
    tags:
      - '*'
  workflow_dispatch:
jobs:
  build:
    runs-on: macos-10.15
    strategy:
      fail-fast: false
    name: 'Build'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          clean: 'false'
          fetch-depth: '0'

      # TODO: Need to figure out the correct way to install mono on linux / mac
      # Currently the latest image has mono 6.12
      # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
      # - name: üî® Use Mono ${{ env.MonoVersion }} SDK
      #   uses: maxim-lobanov/setup-xamarin@v1
      #   with:
      #     mono-version: ${{ env.MonoVersion }}

      - name: Setup NuGet.exe
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: ${{ env.NuGetVersion }}

      - name: üî® Use .NET Core ${{ env.DotNetVersion }} SDK
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: üéÅ dotnet tool restore
        run: |
          dotnet tool restore

      - name: üéÅ nuget install
        run: |
          nuget install tools/packages.config -ExcludeVersion -OutputDirectory tools

      # - name: üç∞ Run Cake
      #   run: |
      #     dotnet cake --bootstrap
      #     dotnet cake --configuration=Release --verbosity=Verbose --target=CI --publish-all --archive

      - name: üç∞ Run Cake
        shell: bash
        run: |
          echo $PATH
          chmod 755 ./build.sh
          ./build.sh --configuration Release --verbosity Verbose --target CI --publish-all --archive

      - name: ‚¨Ü Publish Logs
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: 'logs - ${{ github.workflow }} ${{ matrix.os }}'
          path: '${{ env.Artifacts }}/logs/'

      - name: ‚¨Ü Publish Packages
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: 'packages'
          path: '${{ env.Artifacts }}/package/'

      - name: ‚¨Ü Publish Deployment
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: 'deployment'
          path: '${{ env.Artifacts }}/deployment/'

      - name: ‚¨Ü Publish NuGet
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: 'nuget'
          path: '${{ env.Artifacts }}/nuget/'

      - name: ‚¨Ü Publish Scripts
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: 'scripts - macos-11.0'
          path: '${{ env.Artifacts }}/scripts/'
